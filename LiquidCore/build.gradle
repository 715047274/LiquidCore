apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion 28


    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 7
        versionName "0.7.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -fexceptions"
                arguments "-DANDROID_STL=c++_static"
            }
        }
        sourceSets {
            androidTest.java.srcDirs += '../LiquidV8/src/androidTest/java'
        }

    }

    buildTypes {
        debug {
            testCoverageEnabled = false
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    splits {
        abi {
            enable true
            reset()
            include 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
            universalApk true
        }
    }


}

configurations {
    liquidjs {}
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:support-annotations:28.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    liquidjs project(configuration: 'default', path: ':LiquidV8')
    implementation project(configuration: 'default', path: ':LiquidV8')
    debugImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
}

task extractLiquidjsLibsAndHeaders(type: Sync) {
    dependsOn configurations.liquidjs

    from {
        configurations.liquidjs.collect {zipTree(it)}
    }
    include "jni/**/*.so", "include/**/*"
    into "build/liquidjs_lib"
}

afterEvaluate {
    def addon = file('build/liquidjs_lib')
    if (!addon.exists()) {
        if (project.hasProperty("externalNativeBuildDebug")) {
            externalNativeBuildDebug.dependsOn extractLiquidjsLibsAndHeaders
        }
        if (project.hasProperty("externalNativeBuildRelease")) {
            externalNativeBuildRelease.dependsOn extractLiquidjsLibsAndHeaders
        }
    }
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    configurations.implementation.setCanBeResolved(true)
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator)) +
            configurations.implementation
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task copyHeadersToAARRelease(type: Zip) {
    baseName = 'LiquidCore-release'
    extension = 'aar.in'
    destinationDir = file('build/outputs/aar')
    def aarNameO = "build/outputs/aar/LiquidCore-release.aar"

    from zipTree(aarNameO)
    from("../deps/node-10.15.3/deps/cares/include") {
        into('include/cares')
        include ('**/*.h')
    }
    from("../deps/node-10.15.3/deps/http_parser") {
        into('include/http_parser')
        include ('**/*.h')
    }
    from("../deps/node-10.15.3/deps/nghttp2") {
        into('include/nghttp2')
        include ('**/*.h')
    }
    from("../deps/node-10.15.3/deps/openssl/openssl/include") {
        into('include/openssl')
        include ('**/*.h')
    }
    from("../deps/node-10.15.3/src") {
        into('include/node')
        include('*.h')
    }
}
task removeOldAARRelease(type: Delete) {
    delete file('build/outputs/aar/LiquidCore-release.aar.in')
}
task renameAARRelease (type: Copy) {
    from ('build/outputs/aar/')
    include 'LiquidCore-release.aar.in'
    destinationDir file('build/outputs/aar/')
    rename "LiquidCore-release.aar.in", "LiquidCore-release.aar"
}

afterEvaluate {
    if (project.hasProperty("bundleReleaseAar")) {
        bundleReleaseAar.finalizedBy copyHeadersToAARRelease
        copyHeadersToAARRelease.finalizedBy renameAARRelease
        renameAARRelease.finalizedBy removeOldAARRelease
    }
}

group='com.github.liquidplayer'